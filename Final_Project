# Creating the gameboard:

# Defining how many rows and columns there are
# More columns and rows than there usually are because I always thought games were too short
num_cols = 10
num_rows = 6

class Grid():
    def __init__(self):
        # Creating slots using a for loop
        # Adding a space in every column, and looping it for every row
        self.grid = [[' ' for _ in range(num_cols)] for _ in range(num_rows)]
        self.turns = 0
        # Starting off with a move out of bounds because nothing hasb een played yet
        self.prev_turn = [-1, -1]

    # Displaying the gameboard
    def print_grid(self):
        print("\n")
        for r in range(num_cols):  # Using a for loop to label "Col_" for every column
            print(f" (Col{r + 1})", end="") # Increasing by 1 each time until the end
        print("\n")

        # Using a nested for loop to print the slots (DON'T EDIT SPACES)
        for r in range(num_rows):
            print('|', end="")
            for c in range(num_cols):
                print(f"  {self.grid[r][c]}   |", end="")
            print("\n")

        print(f"{'--'  * 35}\n") # Creating the bar at the bottom (approx. 70 lines)

    def bounds(self, r, c): # Testing to see if a move is not in the grid
        # If the move is greater than zero but less than the # of rows and columns,
        # then it is in bounds and accepted
        return (r>=0 and r<num_rows and c>=0 and c<num_cols)

    def player_turn(self): # Creating the players (A and Z)
            players = ['O', 'X']
            return players[self.turns % 2] # returns to the next player depending on the number of turns played
    def turn(self, col): # Every turn will go through a column
        for z in range(num_rows - 1, -1, -1):
            if self.grid[z][col] == ' ': # If blank...
                self.grid[z][col] = self.player_turn() # Select this column and play..
                self.prev_turn = [z, col] # Save this as the previous turn (in case they win)

                self.turns += 1
                return True

        return False # if there's no space in column, return false

    def four_in_row(self): # Check to see if there's a winner with 4 in a row
        prev_row = self.prev_turn[0]
        prev_col = self.prev_turn[1]
        prev_turn = self.grid[prev_row][prev_col]

        # There are 8 surrounding piece we need to check for matching letters
        surrounding_directions = [[[-1, 0], 0, True], # Check one below
                      [[1, 0], 0, True], # Check one above
                      [[0, -1], 0, True], # Check one left
                      [[0, 1], 0, True], # Check one right
                      [[-1, -1], 0, True], # Check below and one left
                      [[1, 1], 0, True], # Check above and one right
                      [[-1, 1], 0, True], # Check below and one right
                      [[1, -1], 0, True]] # Check above and one left

        for a in range(4): # Range of 4 because you need 4 to win
            for d in surrounding_directions: # Testing in each of the eight directions 4 times
                r = prev_row + (d[0][0] * (a + 1)) # testing rows + 1 until the 4th
                c = prev_col + (d[0][1] * (a + 1)) # testing columns + 1 until the 4th


                if d[2] and self.bounds(r, c) and self.grid[r][c] == prev_turn:
                    d[1] += 1
                else:
                    d[2] = False

        for i in range(0, 7, 2):
            # Checking to see if there are a cumulative four in a row
            if (surrounding_directions[i][1] + surrounding_directions[i + 1][1] >= 3):
                self.print_grid()
                # Printing the winner (previously player)
                print(f"Congratulations player {prev_turn}! ")
                return prev_turn

        return False



def play():
    game = Grid()
    gameover = False
    while not gameover:
        game.print_grid()
        valid = False
        while not valid:
            user_move = input(f"{game.player_turn()}'s Turn! Please pick a column to drop your piece into: ")
            try:
                valid = game.turn(int(user_move) - 1)
            except:
                print("Out of bounds! Pick again between 1 and 10")

        gameover = game.four_in_row()

if __name__ == '__main__':
    play()
